单例模式：
	确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。
	
	
使用优点：
● 减少频繁的创建和销毁对象，带来的性能消耗
● 由于单例模式只生成一个实例，所以减少了系统的性能开销，当一个对象的产生需要
比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一
个单例对象，然后用永久驻留内存的方式来解决
● 单例模式可以避免对资源的多重占用，例如一个写文件动作，由于只有一个实例存在
内存中，避免对同一个资源文件的同时写操作
● 单例模式可以在系统设置全局的访问点，优化和共享资源访问，例如可以设计一个单
例类，负责所有数据表的映射处理。

单例模式的缺点：
	一般没有接口，扩展困难，但是是自行实例化的，接口对单例模式是没有意义的。在特殊环境下可以有。
● 单例模式对测试是不利的。在并行开发环境中，如果单例模式没有完成，是不能进行
测试的，没有接口也不能使用mock的方式虚拟一个对象。
● 单例模式与单一职责原则有冲突。一个类应该只实现一个逻辑，而不关心它是否是单
例的，是不是要单例取决于环境，单例模式把“要单例”和业务逻辑融合在一个类中。

单例模式的使用场景：
● 要求生成唯一序列号的环境
● 在整个项目中需要一个共享访问点或共享数据，例如一个Web页面上的计数器，可以
不用把每次刷新都记录到数据库中，使用单例模式保持计数器的值，并确保是线程安全的；
● 创建一个对象需要消耗的资源过多，如要访问IO和数据库等资源；
● 需要定义大量的静态常量和静态方法（如工具类）的环境，可以采用单例模式（当然，也可以直接声明为static的方式