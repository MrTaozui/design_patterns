依赖倒置原则：
 1.高层模块依赖不应该依赖底层模块，两者都应该依赖其抽象。
 2.抽象不应该依赖细节
 3.细节依赖抽象
 
● 模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过
接口或抽象类产生的；
● 接口或抽象类不依赖于实现类；
● 实现类依赖接口或抽象；

总结：面向接口编程   OOD  ：需要的时候  传入接口或者其抽象类

也就是我们认为抽象（ICar接口）不
依赖BMW和Benz两个实现类（细节），因此在高层次的模块中应用都是抽象。


我们再来思考依赖倒置对并行开发的影响。两个类之间有依赖关系，只要制定出两者之
间的接口（或抽象类）就可以独立开发了，而且项目之间的单元测试也可以独立地运行。

总结：利用接口或者 抽象类 来作为参数等。。。

依赖正置：类之间是实实在在的实现类间的关系。而编写程序需要的是对现实世界的事物进行抽象，抽象的结果就是
有了抽象类和接口，然后我们根据系统设计的需要产生了抽象间的依赖，代替了人们传统思
维中的事物间的依赖，“倒置”就是从这里产生的。


大家只要记住
是“面向接口编程”就基本上抓住了依赖倒置原则的核心。