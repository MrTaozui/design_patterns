Spring容器的refresh()[创建刷新]
1. prepareRefresh()刷新前的预处理
	1、prepareRefresh();刷新前前的预处理  子类自定义个性化的属性设置
	2、getEnvironment().validateRequiredProperties();检验属性的合法性
	3、earlyApplicationEvents = new LinkedHashSet<ApplicationEvent>();保存容器中的一些早期事件
 2.obtainFreshBeanFactory()：获取BeanFactory
 	1、refreshBeanFactory() 刷新BeanFactory
 	this.beanFactory = new DefaultListableBeanFactory();   在GenericApplicationContext构造函数中创建的是AnnotationConfigApplicationContext的父类
 	设置id
 	2、getBeanFactory();返回GenericApplicationContext 创建的beanFactory
 	3、将beanFactory【DefaultListableBeanFactory】返回
 3.prepareBeanFactory(beanFactory); beanFactory预准备工作
 	1、设置beanFactory的类加载气、支持表达式解析器...
 	2、添加部分的BeanPostProcessor【ApplicationContextAwareProcessor】
 	3、设置忽略的自动装配的接口EnvironmentAware，EmbeddedValueResolverAware...
 	4、注册可以解析的自动装配；我们能直接在任何组件中自动注入：
 			BeanFactory，ResourceLoader，ApplicationEventPublisher，ApplicationContext
 	5、添加BeanPostProcessor【ApplicationListenerDetector】
 	6、添加编译时AspectJ支持
 	7、给容器中注入一些能用的组件（Singleton-Bean）
 		environment[ConfigurableEnvironment],systemProperties[ Map<String, Object>],systemEnvironment[Map<String, Object>]
 4.postProcessBeanFactory(beanFactory); beanFactory准备工作完成后进行后置处理工作
 	1、子类【AnnotationConfigApplicationContext的子类】通过重写这个方法来在beanFactory 创建并预准备完成以后做进一步的设置
=============================================以上是beanFactory的创建以及预准备工作=========================================
5.invokeBeanFactoryPostProcessors(beanFactory);执行BeanFactory的后置处理器。在BeanFactory标准初始化之后执行的；
	两个接口：BeanFactoryPostProcessors,BeanDefinitionRegistryPostProcessor
	1、执行 BeanFactoryPostProcessors的方法
		1、拿到所有的BeanDefinitionRegistryPostProcessor
		2、看优先级排序，先执行实现了PriorityOrdered接口的BeanDefinitionRegistryPostProcessor。
		postProcessor.postProcessBeanDefinitionRegistry(registry);
		3、再执行实现了Ordered接口的BeanDefinitionRegistryPostProcessor
		postProcessor.postProcessBeanDefinitionRegistry(registry);
		4、最后执行没有实现任何优先级或者顺序接口的BeanDefinitionRegistryPostProcessor
		postProcessor.postProcessBeanDefinitionRegistry(registry);
		
		再执行BeanFactoryPostProcessor
		1、获取所有的BeanFactoryPostProcessor
		2、看优先级排序，先执行实现了PriorityOrdered接口的BeanFactoryPostProcessor。
		postProcessor.postProcessBeanFactory();
		3、再执行实现了Ordered接口的BeanFactoryPostProcessor
		postProcessor.postProcessBeanFactory();
		4、最后执行没有实现任何优先级或者顺序接口的BeanFactoryPostProcessor
		postProcessor.postProcessBeanFactory();
5.registerBeanPostProcessors(beanFactory);注册 BeanPostProcessor（Bean的后置处理器）拦截Bean的创建
	不同接口类型的BeanPostProcessor,在Bean创建前后的执行时机是不一样的。
	BeanPostProcessor、
	DestructionAwareBeanPostProcessor、
	InstantiationAwareBeanPostProcessor、
	SmartInstantiationAwareBeanPostProcessor、
	MergedBeanDefinitionPostProcessor、
	
	1、获取所有的BeanPostProcessor；后置处理器默认都可以通过PriorityOrdered,Ordered接口来指定优先级
	2、先注册PriorityOrdered优先级的接口的BeanPostProcessor，把每一个BeanPostProcessor添加到BeanFactory中
	beanFactory.addBeanPostProcessor(postProcessor);
	3、再注册实现了Ordered的接口的。
	4、最后注册没有实现任何优先级接口的。
	5、最终注册MergedBeanDefinitionPostProcessor：
	6、注册一个ApplicationListenerDetector；来在Bean创建完成后是否是ApplicationListener；如果是
	this.applicationContext.addApplicationListener((ApplicationListener<?>) bean);
	（思考，先注册还未执行，之前初始化BeanFactory的时候beanFactory之中存储的只是Bean的定义信息，还未创建实例，
	  上面注册BeanPostProcessor的时候会从BeanFactory中获取相关的Bean的定义信息，并且实例化）
7、initMessageSource();初始化messageSource组件（做国际化功能；消息绑定，消息解析）；
	1、获取beanFactory
	2、看beanFactory中是否有id为messageSource的类型为MessageSource的组件。
		如果有赋值给messageSource，如果没有自己创建一个DelegatingMessageSource
		MessageSource：取出国际化配置文件中的某个key值；能按照区域信息获取。
	3、把创建好的MessageSource注册在容器中，以后获取国际化配置文件的时候，可以自动注入MessageSource；
	beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, this.messageSource);
	MessageSource.getMessage(String code, Object[] args, String defaultMessage, Locale locale);
8、initApplicationEventMulticaster();初始化事件派发器
	1、先获取beanFactory
	2、先从beanFactory中获取applicationEventMulticaster的ApplicationEventMulticaster
	3、如果上一步没有配置，创建一个SimpleApplicationEventMulticaster
	4、将创建的ApplicationEventMulticaster添加到beanFactory中，以后其他组件自动注入即可。
	beanFactory.registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, this.applicationEventMulticaster);
9、onRefresh();留给子容器（子类）
	1、子类重写这个方法，容器刷新的时候可以自定义逻辑。
10、registerListeners();给容器中将所有项目里面的ApplicationListener注册进来。
	1、从容器中拿到所有的ApplicationListener
	2、将每个监听器添加到事件派发器中。
	getApplicationEventMulticaster().addApplicationListener(listener);
	3、派发之前步骤产生的事件；
11、finishBeanFactoryInitialization(beanFactory);初始化所有剩下的单实例Bean;
	1、beanFactory.preInstantiateSingletons();初始化剩下的单实例Bean;
		1、获取容器中所有bean,依次进行初始化和创建。
		2、获取bean的定义信息。
		3、bean不是抽象的，不是懒加载的，是单实例的
			1、判断是否是FactoryBean;是否是实现FactoryBean接口的Bean
			2、不是工厂bean,利用getBean(beanName)创建对象。
				0、getBean(beanName);ioc.getBean(beanName);
				1、doGetBean(name, null, null, false);
				2、先获取缓存中保存的单实例Bean,如果可以获取到说明这个bean之前被创建过，（所有创建过的单实例Bean会被缓存起来。）
				private final Map<String, Object> singletonObjects = new ConcurrentHashMap<String, Object>(256);缓存所有的单实例Bean
				3、缓存中获取不到，开始对象Bean的创建流程。
				4、标记当前Bean已经被创建，防止多线程创建多个单实例的Bean
				5、获取bean的定义信息。
				6、【获取当前Bean依赖的其他的Bean;如果有按照getBean()把依赖的Bean先创建出来。】
				7、启动单实例的创建流程：
					1、createBean(beanName, mbd, args);
					2、Object bean = resolveBeforeInstantiation(beanName, mbdToUse);让BeanPostProcessor先拦截让返回代理对象的机会。
					InstantiationAwareBeanPostProcessor提前执行；
					先触发：postProcessBeforeInstantiation()
					如果有返回值：触发postProcessAfterInitialization();
					3、如果InstantiationAwareBeanPostProcessor没有返回代理对象；调用4
					4、Object beanInstance = doCreateBean(beanName, mbdToUse, args);
						1、 createBeanInstance(beanName, mbd, args);创建Bean实例。
							利用工厂方法或者对象的构造器创建出bean实例。
						2、applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);
							调用MergedBeanDefinitionPostProcessor的
							bdp.postProcessMergedBeanDefinition(mbd, beanType, beanName);方法
						3、populateBean(beanName, mbd, instanceWrapper);为Bean属性赋值。
							赋值之前：
								1、拿到InstantiationAwareBeanPostProcessor后置处理器
								执行postProcessAfterInstantiation()方法。
								2、拿到InstantiationAwareBeanPostProcessor后置处理器
								postProcessPropertyValues();
								==^^^^^赋值之前^^^^^===
								3、应用Bean的属性的值；为属性利用setter方法等进行赋值。
								postProcessPropertyValues(pvs, filteredPds, bw, beanName);
								4、Bean初始化initializeBean(beanName, exposedObject, mbd);
									1、【执行Aware接口方法】invokeAwareMethods(beanName, bean);执行Aware接口得方法。（实现xxxAware接口得可以在此给bean赋值）
									BeanNameAware、BeanClassLoaderAware、BeanFactoryAware
									2、【执行后置处理器执行之前得方法】applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);
									 BeanPostProcessor.postProcessBeforeInitialization(result, beanName);
									3、【执行初始化方法】invokeInitMethods(beanName, wrappedBean, mbd);
										1、是否是InitializingBean接口得实现；执行接口规定的初始化。
										2、是否自定义初始化方法。
									4、【执行后置处理器初始化之后】applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);
									BeanPostProcessor.postProcessAfterInitialization(result, beanName);
								5、注册bean的销毁方法。registerDisposableBeanIfNecessary(beanName, bean, mbd);
					5、将创建的Bean添加到缓存中addSingleton(beanName, singletonObject);
					ioc容器就是Map；很多的Map保存了单实例Bean，环境信息.....
			所有Bean都利用getBean()创建完成以后。
				检查所有的Bean是否是SmartInitializingSingleton接口的，如果是 就执行afterSingletonsInstantiated()方法
12、finishRefresh();完成BeanFactory的初始化创建工作，ioc容器创建完成。
	1、initLifecycleProcessor();初始化和生命周期有关的处理器。LifecycleProcessor
	默认从容器中招是否有LifecycleProcessor的组件【LifecycleProcessor】，如果没有new DefaultLifecycleProcessor();加入在容器中
	写一个LifecycleProcessor的实现类，可以在BeanFactory的生命周期处进行拦截。
	 void onRefresh(); void onClose();
	2、getLifecycleProcessor().onRefresh();拿到前面定义的生命周期处理器（BeanFactory）回调onRefresh();
	3、publishEvent(new ContextRefreshedEvent(this));发布容器完成事件。
	4、LiveBeansView.registerApplicationContext(this);
								
	================总结==================
	1、Spring容器在启动的时候，会先保存所有注册进来的Bean的定义信息。(beanFactory中)
		1、xml注册Bean <bean>
		2、使用注解注册Bean :@Service @Controller @Repository @Component @Bean
	2、Spring容器会在合适的时机会创建这些Bean
		1、用到这个Bean的时候；利用getBean方法创建Bean;创建好以后保存在容器中 (一些后置处理器等)
		2、统一创建剩下的Bean的时候：finishBeanFactoryInitialization(beanFactory)。
	3、后置处理器：BeanPostProcessor
		每一个Bean创建完成的时候，都会使用各种后置处理器来进行处理；来增强bean的功能。
		例如：AutowiredAnnotationBeanPostProcessor来处理自动注入
		AspectJAwareAdvisorAutoProxyCreator:来做AOP功能。
		.......
	4、事件驱动模型：
		ApplicationListener:事件监听：
		事件派发：ApplicationEventMulticaster(多播器)

	
					
					
					
						
				
				
	
		
		